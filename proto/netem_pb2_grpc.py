# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from proto import netem_pb2 as proto_dot_netem__pb2


class NetemStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ServerGetVersion = channel.unary_unary(
                '/netem.Netem/ServerGetVersion',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.VersionResponse.FromString,
                )
        self.ServerPullImages = channel.unary_stream(
                '/netem.Netem/ServerPullImages',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.PullSrvMsg.FromString,
                )
        self.ServerCleanContainers = channel.unary_unary(
                '/netem.Netem/ServerCleanContainers',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.AckResponse.FromString,
                )
        self.ProjectGetMany = channel.unary_unary(
                '/netem.Netem/ProjectGetMany',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.PrjListResponse.FromString,
                )
        self.ProjectOpen = channel.unary_unary(
                '/netem.Netem/ProjectOpen',
                request_serializer=proto_dot_netem__pb2.OpenRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.PrjOpenResponse.FromString,
                )
        self.ProjectClose = channel.unary_stream(
                '/netem.Netem/ProjectClose',
                request_serializer=proto_dot_netem__pb2.ProjectRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.ProjectCloseMsg.FromString,
                )
        self.ProjectSave = channel.unary_stream(
                '/netem.Netem/ProjectSave',
                request_serializer=proto_dot_netem__pb2.ProjectRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.ProjectSaveMsg.FromString,
                )
        self.ProjectGetNodeConfigs = channel.unary_unary(
                '/netem.Netem/ProjectGetNodeConfigs',
                request_serializer=proto_dot_netem__pb2.ProjectRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.FileResponse.FromString,
                )
        self.ProjectGetStatus = channel.unary_unary(
                '/netem.Netem/ProjectGetStatus',
                request_serializer=proto_dot_netem__pb2.ProjectRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.StatusResponse.FromString,
                )
        self.ReadNetworkFile = channel.unary_unary(
                '/netem.Netem/ReadNetworkFile',
                request_serializer=proto_dot_netem__pb2.ProjectRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.FileResponse.FromString,
                )
        self.WriteNetworkFile = channel.unary_unary(
                '/netem.Netem/WriteNetworkFile',
                request_serializer=proto_dot_netem__pb2.WNetworkRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.AckResponse.FromString,
                )
        self.TopologyCheck = channel.unary_unary(
                '/netem.Netem/TopologyCheck',
                request_serializer=proto_dot_netem__pb2.ProjectRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.AckResponse.FromString,
                )
        self.TopologyReload = channel.unary_stream(
                '/netem.Netem/TopologyReload',
                request_serializer=proto_dot_netem__pb2.ProjectRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.TopologyRunMsg.FromString,
                )
        self.TopologyRun = channel.unary_stream(
                '/netem.Netem/TopologyRun',
                request_serializer=proto_dot_netem__pb2.ProjectRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.TopologyRunMsg.FromString,
                )
        self.TopologyStartAll = channel.unary_unary(
                '/netem.Netem/TopologyStartAll',
                request_serializer=proto_dot_netem__pb2.ProjectRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.AckResponse.FromString,
                )
        self.TopologyStopAll = channel.unary_unary(
                '/netem.Netem/TopologyStopAll',
                request_serializer=proto_dot_netem__pb2.ProjectRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.AckResponse.FromString,
                )
        self.NodeReadConfigFiles = channel.unary_unary(
                '/netem.Netem/NodeReadConfigFiles',
                request_serializer=proto_dot_netem__pb2.NodeRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.ConfigFilesResponse.FromString,
                )
        self.NodeCanRunConsole = channel.unary_unary(
                '/netem.Netem/NodeCanRunConsole',
                request_serializer=proto_dot_netem__pb2.NodeRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.AckResponse.FromString,
                )
        self.NodeConsole = channel.stream_stream(
                '/netem.Netem/NodeConsole',
                request_serializer=proto_dot_netem__pb2.ConsoleCltMsg.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.ConsoleSrvMsg.FromString,
                )
        self.NodeStart = channel.unary_unary(
                '/netem.Netem/NodeStart',
                request_serializer=proto_dot_netem__pb2.NodeRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.AckResponse.FromString,
                )
        self.NodeStop = channel.unary_unary(
                '/netem.Netem/NodeStop',
                request_serializer=proto_dot_netem__pb2.NodeRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.AckResponse.FromString,
                )
        self.NodeRestart = channel.unary_unary(
                '/netem.Netem/NodeRestart',
                request_serializer=proto_dot_netem__pb2.NodeRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.AckResponse.FromString,
                )
        self.NodeSetIfState = channel.unary_unary(
                '/netem.Netem/NodeSetIfState',
                request_serializer=proto_dot_netem__pb2.NodeIfStateRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.AckResponse.FromString,
                )
        self.NodeCapture = channel.unary_stream(
                '/netem.Netem/NodeCapture',
                request_serializer=proto_dot_netem__pb2.NodeInterfaceRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.CaptureSrvMsg.FromString,
                )
        self.NodeCopyFrom = channel.unary_stream(
                '/netem.Netem/NodeCopyFrom',
                request_serializer=proto_dot_netem__pb2.CopyMsg.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.CopyMsg.FromString,
                )
        self.NodeCopyTo = channel.stream_unary(
                '/netem.Netem/NodeCopyTo',
                request_serializer=proto_dot_netem__pb2.CopyMsg.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.AckResponse.FromString,
                )
        self.LinkUpdate = channel.unary_unary(
                '/netem.Netem/LinkUpdate',
                request_serializer=proto_dot_netem__pb2.LinkRequest.SerializeToString,
                response_deserializer=proto_dot_netem__pb2.AckResponse.FromString,
                )


class NetemServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ServerGetVersion(self, request, context):
        """Server actions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerPullImages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ServerCleanContainers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProjectGetMany(self, request, context):
        """Project actions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProjectOpen(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProjectClose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProjectSave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProjectGetNodeConfigs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProjectGetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadNetworkFile(self, request, context):
        """Read/Write network topology
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteNetworkFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TopologyCheck(self, request, context):
        """topology actions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TopologyReload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TopologyRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TopologyStartAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TopologyStopAll(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeReadConfigFiles(self, request, context):
        """Node actions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeCanRunConsole(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeConsole(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeStart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeStop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeRestart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeSetIfState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeCapture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeCopyFrom(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeCopyTo(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LinkUpdate(self, request, context):
        """Link actions
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NetemServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ServerGetVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.ServerGetVersion,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=proto_dot_netem__pb2.VersionResponse.SerializeToString,
            ),
            'ServerPullImages': grpc.unary_stream_rpc_method_handler(
                    servicer.ServerPullImages,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=proto_dot_netem__pb2.PullSrvMsg.SerializeToString,
            ),
            'ServerCleanContainers': grpc.unary_unary_rpc_method_handler(
                    servicer.ServerCleanContainers,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=proto_dot_netem__pb2.AckResponse.SerializeToString,
            ),
            'ProjectGetMany': grpc.unary_unary_rpc_method_handler(
                    servicer.ProjectGetMany,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=proto_dot_netem__pb2.PrjListResponse.SerializeToString,
            ),
            'ProjectOpen': grpc.unary_unary_rpc_method_handler(
                    servicer.ProjectOpen,
                    request_deserializer=proto_dot_netem__pb2.OpenRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.PrjOpenResponse.SerializeToString,
            ),
            'ProjectClose': grpc.unary_stream_rpc_method_handler(
                    servicer.ProjectClose,
                    request_deserializer=proto_dot_netem__pb2.ProjectRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.ProjectCloseMsg.SerializeToString,
            ),
            'ProjectSave': grpc.unary_stream_rpc_method_handler(
                    servicer.ProjectSave,
                    request_deserializer=proto_dot_netem__pb2.ProjectRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.ProjectSaveMsg.SerializeToString,
            ),
            'ProjectGetNodeConfigs': grpc.unary_unary_rpc_method_handler(
                    servicer.ProjectGetNodeConfigs,
                    request_deserializer=proto_dot_netem__pb2.ProjectRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.FileResponse.SerializeToString,
            ),
            'ProjectGetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.ProjectGetStatus,
                    request_deserializer=proto_dot_netem__pb2.ProjectRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.StatusResponse.SerializeToString,
            ),
            'ReadNetworkFile': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadNetworkFile,
                    request_deserializer=proto_dot_netem__pb2.ProjectRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.FileResponse.SerializeToString,
            ),
            'WriteNetworkFile': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteNetworkFile,
                    request_deserializer=proto_dot_netem__pb2.WNetworkRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.AckResponse.SerializeToString,
            ),
            'TopologyCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.TopologyCheck,
                    request_deserializer=proto_dot_netem__pb2.ProjectRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.AckResponse.SerializeToString,
            ),
            'TopologyReload': grpc.unary_stream_rpc_method_handler(
                    servicer.TopologyReload,
                    request_deserializer=proto_dot_netem__pb2.ProjectRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.TopologyRunMsg.SerializeToString,
            ),
            'TopologyRun': grpc.unary_stream_rpc_method_handler(
                    servicer.TopologyRun,
                    request_deserializer=proto_dot_netem__pb2.ProjectRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.TopologyRunMsg.SerializeToString,
            ),
            'TopologyStartAll': grpc.unary_unary_rpc_method_handler(
                    servicer.TopologyStartAll,
                    request_deserializer=proto_dot_netem__pb2.ProjectRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.AckResponse.SerializeToString,
            ),
            'TopologyStopAll': grpc.unary_unary_rpc_method_handler(
                    servicer.TopologyStopAll,
                    request_deserializer=proto_dot_netem__pb2.ProjectRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.AckResponse.SerializeToString,
            ),
            'NodeReadConfigFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeReadConfigFiles,
                    request_deserializer=proto_dot_netem__pb2.NodeRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.ConfigFilesResponse.SerializeToString,
            ),
            'NodeCanRunConsole': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeCanRunConsole,
                    request_deserializer=proto_dot_netem__pb2.NodeRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.AckResponse.SerializeToString,
            ),
            'NodeConsole': grpc.stream_stream_rpc_method_handler(
                    servicer.NodeConsole,
                    request_deserializer=proto_dot_netem__pb2.ConsoleCltMsg.FromString,
                    response_serializer=proto_dot_netem__pb2.ConsoleSrvMsg.SerializeToString,
            ),
            'NodeStart': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeStart,
                    request_deserializer=proto_dot_netem__pb2.NodeRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.AckResponse.SerializeToString,
            ),
            'NodeStop': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeStop,
                    request_deserializer=proto_dot_netem__pb2.NodeRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.AckResponse.SerializeToString,
            ),
            'NodeRestart': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeRestart,
                    request_deserializer=proto_dot_netem__pb2.NodeRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.AckResponse.SerializeToString,
            ),
            'NodeSetIfState': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeSetIfState,
                    request_deserializer=proto_dot_netem__pb2.NodeIfStateRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.AckResponse.SerializeToString,
            ),
            'NodeCapture': grpc.unary_stream_rpc_method_handler(
                    servicer.NodeCapture,
                    request_deserializer=proto_dot_netem__pb2.NodeInterfaceRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.CaptureSrvMsg.SerializeToString,
            ),
            'NodeCopyFrom': grpc.unary_stream_rpc_method_handler(
                    servicer.NodeCopyFrom,
                    request_deserializer=proto_dot_netem__pb2.CopyMsg.FromString,
                    response_serializer=proto_dot_netem__pb2.CopyMsg.SerializeToString,
            ),
            'NodeCopyTo': grpc.stream_unary_rpc_method_handler(
                    servicer.NodeCopyTo,
                    request_deserializer=proto_dot_netem__pb2.CopyMsg.FromString,
                    response_serializer=proto_dot_netem__pb2.AckResponse.SerializeToString,
            ),
            'LinkUpdate': grpc.unary_unary_rpc_method_handler(
                    servicer.LinkUpdate,
                    request_deserializer=proto_dot_netem__pb2.LinkRequest.FromString,
                    response_serializer=proto_dot_netem__pb2.AckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'netem.Netem', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Netem(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ServerGetVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/ServerGetVersion',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            proto_dot_netem__pb2.VersionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerPullImages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/netem.Netem/ServerPullImages',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            proto_dot_netem__pb2.PullSrvMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ServerCleanContainers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/ServerCleanContainers',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            proto_dot_netem__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProjectGetMany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/ProjectGetMany',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            proto_dot_netem__pb2.PrjListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProjectOpen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/ProjectOpen',
            proto_dot_netem__pb2.OpenRequest.SerializeToString,
            proto_dot_netem__pb2.PrjOpenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProjectClose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/netem.Netem/ProjectClose',
            proto_dot_netem__pb2.ProjectRequest.SerializeToString,
            proto_dot_netem__pb2.ProjectCloseMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProjectSave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/netem.Netem/ProjectSave',
            proto_dot_netem__pb2.ProjectRequest.SerializeToString,
            proto_dot_netem__pb2.ProjectSaveMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProjectGetNodeConfigs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/ProjectGetNodeConfigs',
            proto_dot_netem__pb2.ProjectRequest.SerializeToString,
            proto_dot_netem__pb2.FileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProjectGetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/ProjectGetStatus',
            proto_dot_netem__pb2.ProjectRequest.SerializeToString,
            proto_dot_netem__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadNetworkFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/ReadNetworkFile',
            proto_dot_netem__pb2.ProjectRequest.SerializeToString,
            proto_dot_netem__pb2.FileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteNetworkFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/WriteNetworkFile',
            proto_dot_netem__pb2.WNetworkRequest.SerializeToString,
            proto_dot_netem__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TopologyCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/TopologyCheck',
            proto_dot_netem__pb2.ProjectRequest.SerializeToString,
            proto_dot_netem__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TopologyReload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/netem.Netem/TopologyReload',
            proto_dot_netem__pb2.ProjectRequest.SerializeToString,
            proto_dot_netem__pb2.TopologyRunMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TopologyRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/netem.Netem/TopologyRun',
            proto_dot_netem__pb2.ProjectRequest.SerializeToString,
            proto_dot_netem__pb2.TopologyRunMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TopologyStartAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/TopologyStartAll',
            proto_dot_netem__pb2.ProjectRequest.SerializeToString,
            proto_dot_netem__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TopologyStopAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/TopologyStopAll',
            proto_dot_netem__pb2.ProjectRequest.SerializeToString,
            proto_dot_netem__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeReadConfigFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/NodeReadConfigFiles',
            proto_dot_netem__pb2.NodeRequest.SerializeToString,
            proto_dot_netem__pb2.ConfigFilesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeCanRunConsole(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/NodeCanRunConsole',
            proto_dot_netem__pb2.NodeRequest.SerializeToString,
            proto_dot_netem__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeConsole(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/netem.Netem/NodeConsole',
            proto_dot_netem__pb2.ConsoleCltMsg.SerializeToString,
            proto_dot_netem__pb2.ConsoleSrvMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/NodeStart',
            proto_dot_netem__pb2.NodeRequest.SerializeToString,
            proto_dot_netem__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/NodeStop',
            proto_dot_netem__pb2.NodeRequest.SerializeToString,
            proto_dot_netem__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeRestart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/NodeRestart',
            proto_dot_netem__pb2.NodeRequest.SerializeToString,
            proto_dot_netem__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeSetIfState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/NodeSetIfState',
            proto_dot_netem__pb2.NodeIfStateRequest.SerializeToString,
            proto_dot_netem__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeCapture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/netem.Netem/NodeCapture',
            proto_dot_netem__pb2.NodeInterfaceRequest.SerializeToString,
            proto_dot_netem__pb2.CaptureSrvMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeCopyFrom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/netem.Netem/NodeCopyFrom',
            proto_dot_netem__pb2.CopyMsg.SerializeToString,
            proto_dot_netem__pb2.CopyMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeCopyTo(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/netem.Netem/NodeCopyTo',
            proto_dot_netem__pb2.CopyMsg.SerializeToString,
            proto_dot_netem__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LinkUpdate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/netem.Netem/LinkUpdate',
            proto_dot_netem__pb2.LinkRequest.SerializeToString,
            proto_dot_netem__pb2.AckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
